import numpy as np
import streamlit as st
import pandas as pd
from pulp import LpMaximize, LpMinimize, LpProblem, LpVariable, LpStatus, value

st.set_page_config(
    page_title="Calculadora Simplex - PPL",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ==================== ESTILOS CSS ====================

st.markdown("""
<style>
    /* Cabe√ßalho principal */
    .main-header {
        font-size: 2.2rem;
        font-weight: 600;
        color: #1f77b4;
        text-align: center;
        padding: 0.5rem 0;
        margin-bottom: 0.3rem;
    }
    
    /* Subt√≠tulo */
    .subtitle {
        font-size: 1rem;
        color: #666;
        text-align: center;
        margin-bottom: 1.5rem;
    }
    
    /* Sub-cabe√ßalhos */
    .sub-header {
        font-size: 1.4rem;
        font-weight: 600;
        color: #333;
        padding: 0.5rem 0;
        border-bottom: 2px solid #e0e0e0;
        margin: 1rem 0 0.8rem 0;
    }
    
    /* Card de resultados - simples e clean */
    .result-card {
        background: #ffffff;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1.2rem;
        margin-bottom: 1rem;
    }
    
    /* Caixa de m√©trica - vers√£o simples */
    .metric-card {
        background: #f8f9fa;
        border: 2px solid #1f77b4;
        border-radius: 8px;
        padding: 1.2rem;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: #1f77b4;
        margin-bottom: 0.3rem;
    }
    
    .metric-label {
        font-size: 0.9rem;
        color: #666;
    }
    
    /* Caixa de sucesso */
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-left: 4px solid #28a745;
        padding: 1rem 1.2rem;
        border-radius: 4px;
        margin: 1rem 0;
    }
    
    /* Caixa de aviso */
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-left: 4px solid #ffc107;
        padding: 1rem 1.2rem;
        border-radius: 4px;
        margin: 1rem 0;
    }
    
    /* Caixa de exemplo */
    .example-box {
        background-color: #f0f8ff;
        border: 1px solid #cce5ff;
        border-radius: 4px;
        padding: 1rem;
        font-size: 0.9rem;
    }
    
    /* Remove espa√ßamento extra */
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    
    /* Bot√µes simples e clean */
    .stButton>button {
        background-color: #1f77b4;
        color: white;
        font-weight: 500;
        border: none;
        padding: 0.6rem 1.5rem;
        border-radius: 4px;
        font-size: 1rem;
        transition: background-color 0.2s;
    }
    
    .stButton>button:hover {
        background-color: #1557a0;
    }
</style>
""", unsafe_allow_html=True)


# ==================== FUN√á√ïES PRINCIPAIS ====================

def simplex(funcObj, restricoes, constantes, num_variables, tipo_otimizacao):
    """
    Resolve Problemas de Programa√ß√£o Linear usando biblioteca PuLP
    
    Args:
        funcObj: Lista de coeficientes da fun√ß√£o objetivo
        restricoes: Matriz de coeficientes das restri√ß√µes
        constantes: Lista de valores do lado direito (RHS)
        num_variables: N√∫mero de vari√°veis de decis√£o
        tipo_otimizacao: "Maximizar" ou "Minimizar"
    
    Returns:
        solucao: Array com valores √≥timos das vari√°veis
        valorOtimo: Valor √≥timo da fun√ß√£o objetivo
        precoSombra: Pre√ßos-sombra das restri√ß√µes
        tableau: Tableau simplificado para exibi√ß√£o
    """
    try:
        # Define o tipo de problema
        if tipo_otimizacao == "Maximizar":
            prob = LpProblem("PPL", LpMaximize)
        else:
            prob = LpProblem("PPL", LpMinimize)
        
        # Cria as vari√°veis de decis√£o (n√£o-negativas)
        vars = [LpVariable(f"x{i+1}", lowBound=0) for i in range(num_variables)]
        
        # Define a fun√ß√£o objetivo
        prob += sum([funcObj[i] * vars[i] for i in range(num_variables)]), "FuncaoObjetivo"
        
        # Adiciona as restri√ß√µes
        for i in range(len(constantes)):
            prob += (sum([restricoes[i][j] * vars[j] for j in range(num_variables)]) <= constantes[i], f"Restricao_{i+1}")
        
        # Resolve o problema
        status = prob.solve()
        
        # Verifica se encontrou solu√ß√£o √≥tima
        if LpStatus[prob.status] != "Optimal":
            st.error(f"‚ùå **N√£o foi poss√≠vel encontrar solu√ß√£o √≥tima.**\n\nStatus: {LpStatus[prob.status]}")
            if LpStatus[prob.status] == "Infeasible":
                st.warning("‚ö†Ô∏è O problema √© **invi√°vel** - as restri√ß√µes s√£o inconsistentes.")
            elif LpStatus[prob.status] == "Unbounded":
                st.warning("‚ö†Ô∏è O problema √© **ilimitado** - a fun√ß√£o objetivo pode crescer indefinidamente.")
            return None, None, None, None
        
        # Extrai a solu√ß√£o
        solucao = np.array([value(var) for var in vars])
        
        # Valor √≥timo
        valorOtimo = value(prob.objective)
        
        # Pre√ßos-sombra (dual values das restri√ß√µes)
        precoSombra = []
        for i in range(len(constantes)):
            constraint = prob.constraints.get(f"Restricao_{i+1}")
            if constraint and hasattr(constraint, 'pi') and constraint.pi is not None:
                precoSombra.append(constraint.pi)
            else:
                precoSombra.append(0.0)
        precoSombra = np.array(precoSombra)
        
        # Monta um tableau simplificado para exibi√ß√£o
        n_cons = len(constantes)
        tableau = np.zeros((n_cons + 1, num_variables + n_cons + 1))
        
        # Preenche com valores das restri√ß√µes
        for i in range(n_cons):
            for j in range(num_variables):
                tableau[i, j] = restricoes[i][j]
            tableau[i, num_variables + i] = 1  # Vari√°vel de folga
            tableau[i, -1] = constantes[i]
        
        # Linha da fun√ß√£o objetivo
        for i, coef in enumerate(funcObj):
            tableau[-1, i] = coef
        tableau[-1, -1] = valorOtimo
        
        return solucao, valorOtimo, precoSombra, tableau
        
    except Exception as e:
        st.error(f"‚ùå **Erro ao resolver o problema:**\n\n{str(e)}")
        return None, None, None, None


def validar_entrada(funcObj, restricoes, constantes):
    """Valida os dados de entrada do problema"""
    erros = []
    
    # Verifica se os coeficientes da fun√ß√£o objetivo s√£o n√∫meros v√°lidos
    if not all(isinstance(c, (int, float)) for c in funcObj):
        erros.append("‚ö†Ô∏è Coeficientes da fun√ß√£o objetivo devem ser num√©ricos")
    
    # Verifica se as constantes s√£o n√£o-negativas
    if any(c < 0 for c in constantes):
        erros.append("‚ö†Ô∏è As constantes (lado direito) devem ser n√£o-negativas (‚â• 0)")
    
    # Verifica se h√° pelo menos uma restri√ß√£o
    if len(restricoes) == 0:
        erros.append("‚ö†Ô∏è Deve haver pelo menos uma restri√ß√£o")
    
    # Verifica se todas as restri√ß√µes t√™m o mesmo n√∫mero de coeficientes
    if restricoes and not all(len(r) == len(restricoes[0]) for r in restricoes):
        erros.append("‚ö†Ô∏è Todas as restri√ß√µes devem ter o mesmo n√∫mero de vari√°veis")
    
    return erros


# ==================== INTERFACE PRINCIPAL ====================

# Cabe√ßalho
st.markdown('<div class="main-header">üìä Calculadora de Programa√ß√£o Linear</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Resolva problemas de otimiza√ß√£o com o M√©todo Simplex usando PuLP</div>', unsafe_allow_html=True)

# Informa√ß√µes sobre a ferramenta
with st.expander("üìö **Sobre esta Calculadora** | Clique para expandir", expanded=False):
    col_info1, col_info2 = st.columns(2)
    
    with col_info1:
        st.markdown("""
        ### üéØ **O que √© Programa√ß√£o Linear?**
        
        A **Programa√ß√£o Linear (PPL)** √© uma t√©cnica matem√°tica para otimizar 
        (maximizar ou minimizar) uma fun√ß√£o objetivo linear, sujeita a um conjunto 
        de restri√ß√µes lineares.
        
        **Aplica√ß√µes comuns:**
        - üì¶ Log√≠stica e distribui√ß√£o
        - üè≠ Planejamento de produ√ß√£o
        - üíº Aloca√ß√£o de recursos
        - üìä Otimiza√ß√£o de portf√≥lio
        - üöö Roteiriza√ß√£o de ve√≠culos
        """)
    
    with col_info2:
        st.markdown("""
        ### ‚öôÔ∏è **Caracter√≠sticas desta Calculadora**
        
        - ‚úÖ Suporta **2, 3 ou 4 vari√°veis** de decis√£o
        - ‚úÖ Problemas de **Maximiza√ß√£o** e **Minimiza√ß√£o**
        - ‚úÖ Restri√ß√µes do tipo **‚â§** (menor ou igual)
        - ‚úÖ Calcula **ponto √≥timo** e **valor √≥timo**
        - ‚úÖ Determina **pre√ßos-sombra** (shadow prices)
        - ‚úÖ Exibe **tableau final** do Simplex
        - ‚úÖ Valida√ß√£o autom√°tica de entrada
        - ‚úÖ Interface intuitiva e visual
        """)
    
    st.markdown("---")
    st.markdown("""
    ### üìñ **Como usar:**
    
    1. **Configure** o n√∫mero de vari√°veis e restri√ß√µes na barra lateral
    2. **Nomeie** as vari√°veis (opcional) para facilitar a interpreta√ß√£o
    3. **Insira** os coeficientes da fun√ß√£o objetivo
    4. **Defina** as restri√ß√µes com seus coeficientes e limites
    5. **Clique** em "Calcular Solu√ß√£o √ìtima" para obter os resultados
    6. **Analise** os resultados: ponto √≥timo, valor √≥timo e pre√ßos-sombra
    """)

st.markdown("---")


# ==================== SIDEBAR - CONFIGURA√á√ïES ====================

st.sidebar.markdown("### ‚öôÔ∏è **Configura√ß√µes do Problema**")
st.sidebar.markdown("---")

# Tipo de Otimiza√ß√£o
tipo_otimizacao = st.sidebar.radio(
    "üéØ **Tipo de Otimiza√ß√£o**",
    options=["Maximizar", "Minimizar"],
    index=0,
    help="Escolha se deseja maximizar ou minimizar a fun√ß√£o objetivo"
)

st.sidebar.markdown("---")

# N√∫mero de Vari√°veis
num_variables = st.sidebar.selectbox(
    "üî¢ **N√∫mero de Vari√°veis de Decis√£o**",
    options=[2, 3, 4],
    index=0,
    help="Escolha quantas vari√°veis de decis√£o (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ) o problema ter√°"
)

# N√∫mero de Restri√ß√µes
num_constraints = st.sidebar.number_input(
    "üîí **N√∫mero de Restri√ß√µes**",
    min_value=1,
    max_value=10,
    value=2,
    step=1,
    help="Quantidade de restri√ß√µes do problema (m√°ximo 10)"
)

st.sidebar.markdown("---")
st.sidebar.markdown("### üè∑Ô∏è **Nomear Vari√°veis (Opcional)**")
st.sidebar.caption("Personalize os nomes das vari√°veis para facilitar a interpreta√ß√£o")

nomes_variaveis = []
for i in range(4):  # Sempre 4 para cobrir todas as possibilidades
    if i < num_variables:
        nome = st.sidebar.text_input(
            f"Vari√°vel x{i+1}",
            value=f"x{i+1}",
            key=f"nome_var_{i}",
            max_chars=15,
            help=f"Nome personalizado para x{i+1} (m√°x. 15 caracteres)"
        )
        nomes_variaveis.append(nome if nome.strip() else f"x{i+1}")
    else:
        nomes_variaveis.append(f"x{i+1}")

st.sidebar.markdown("---")

# Exemplo de Problema
with st.sidebar.expander("üí° **Exemplo: Problema de Produ√ß√£o**"):
    st.markdown("""
    <div class="example-box">
    <strong>üì¶ F√°brica de Eletrodom√©sticos</strong><br><br>
    
    <strong>Maximizar:</strong> Z = 100x‚ÇÅ + 80x‚ÇÇ<br>
    <small>(Lucro por Geladeira e Fog√£o)</small><br><br>
    
    <strong>Sujeito a:</strong><br>
    ‚Ä¢ <code>2x‚ÇÅ + 1x‚ÇÇ ‚â§ 40</code> (Horas de montagem)<br>
    ‚Ä¢ <code>1x‚ÇÅ + 2x‚ÇÇ ‚â§ 50</code> (Horas de teste)<br>
    ‚Ä¢ <code>x‚ÇÅ, x‚ÇÇ ‚â• 0</code> (N√£o-negatividade)<br><br>
    
    <strong>Solu√ß√£o Esperada:</strong><br>
    ‚Ä¢ x‚ÇÅ = 10, x‚ÇÇ = 20<br>
    ‚Ä¢ Z* = 2600
    </div>
    """, unsafe_allow_html=True)

# Formato do Problema
st.sidebar.markdown("---")
st.sidebar.markdown("### üìù **Formato Geral do Problema**")
st.sidebar.info(f"""
**{tipo_otimizacao}:** Z = c‚ÇÅ{nomes_variaveis[0]} + c‚ÇÇ{nomes_variaveis[1]}{' + ...' if num_variables > 2 else ''}

**Sujeito a:**
- a‚ÇÅ‚ÇÅ{nomes_variaveis[0]} + a‚ÇÅ‚ÇÇ{nomes_variaveis[1]}{' + ...' if num_variables > 2 else ''} ‚â§ b‚ÇÅ
- a‚ÇÇ‚ÇÅ{nomes_variaveis[0]} + a‚ÇÇ‚ÇÇ{nomes_variaveis[1]}{' + ...' if num_variables > 2 else ''} ‚â§ b‚ÇÇ
- ...
- {nomes_variaveis[0]}, {nomes_variaveis[1]}{', ...' if num_variables > 2 else ''} ‚â• 0
""")


# ==================== ENTRADA DE DADOS ====================

with st.form(key="ppl_form"):
    
    # Fun√ß√£o Objetivo
    st.markdown('<div class="sub-header">üìà Fun√ß√£o Objetivo</div>', unsafe_allow_html=True)
    
    # Monta a equa√ß√£o com os nomes personalizados
    equacao_obj = " + ".join([f"c{i+1}¬∑{nomes_variaveis[i]}" for i in range(num_variables)])
    tipo_icone = "‚¨ÜÔ∏è" if tipo_otimizacao == "Maximizar" else "‚¨áÔ∏è"
    st.markdown(f"**{tipo_icone} {tipo_otimizacao} Z =** `{equacao_obj}`")
    st.caption("üí° Insira os coeficientes de cada vari√°vel na fun√ß√£o objetivo")
    
    funcObj = []
    cols_obj = st.columns(num_variables)
    subscripts = ['‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ']
    
    for i in range(num_variables):
        with cols_obj[i]:
            coef = st.number_input(
                f"**c{subscripts[i]}** (coef. de {nomes_variaveis[i]})",
                key=f"obj_{i}",
                value=1.0,
                format="%.2f",
                help=f"Coeficiente da vari√°vel {nomes_variaveis[i]} na fun√ß√£o objetivo"
            )
            funcObj.append(coef)

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Restri√ß√µes
    st.markdown('<div class="sub-header">üîí Restri√ß√µes</div>', unsafe_allow_html=True)
    
    # Monta a equa√ß√£o com os nomes personalizados
    equacao_rest = " + ".join([f"a¬∑{nomes_variaveis[i]}" for i in range(num_variables)])
    st.markdown(f"**Formato:** `{equacao_rest} ‚â§ b`")
    st.caption("üí° Todas as restri√ß√µes devem ser do tipo ‚â§ (menor ou igual) com lado direito n√£o-negativo")
    
    restric = []
    const = []
    
    for i in range(num_constraints):
        st.markdown(f"#### Restri√ß√£o {i+1}:")
        cols_rest = st.columns(num_variables + 1)
        row = []
        
        for j in range(num_variables):
            with cols_rest[j]:
                coef = st.number_input(
                    f"**{nomes_variaveis[j]}**",
                    key=f"r{i}_c{j}",
                    value=1.0,
                    format="%.2f",
                    help=f"Coeficiente de {nomes_variaveis[j]} na restri√ß√£o {i+1}"
                )
                row.append(coef)
        
        restric.append(row)
        
        with cols_rest[num_variables]:
            b_val = st.number_input(
                "**‚â§ b** (LD)",
                key=f"r{i}_b",
                value=10.0,
                min_value=0.0,
                format="%.2f",
                help=f"Lado direito da restri√ß√£o {i+1} (deve ser ‚â• 0)"
            )
            const.append(b_val)

    st.markdown("<br>", unsafe_allow_html=True)
    
    # Bot√£o de submit com estilo
    col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
    with col_btn2:
        submit_button = st.form_submit_button(
            label="üöÄ Calcular Solu√ß√£o √ìtima",
            use_container_width=True
        )


# ==================== PROCESSAMENTO E RESULTADOS ====================

if submit_button:
    
    # Valida√ß√£o de entrada
    erros = validar_entrada(funcObj, restric, const)
    
    if erros:
        st.markdown('<div class="warning-box">', unsafe_allow_html=True)
        st.markdown("### ‚ö†Ô∏è **Erros de Valida√ß√£o**")
        for erro in erros:
            st.markdown(f"- {erro}")
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        # Resolve o problema
        with st.spinner('üîÑ **Resolvendo o problema de programa√ß√£o linear...**'):
            solucao, valorOtimo, precoSombra, final_tableau = simplex(funcObj, restric, const, num_variables, tipo_otimizacao)

        if solucao is not None:
            
            # ========== RESULTADOS PRINCIPAIS ==========
            st.markdown('<div class="sub-header">üìä Resultados da Otimiza√ß√£o</div>', unsafe_allow_html=True)
            
            # Primeira linha de resultados
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("#### üéØ **Ponto √ìtimo**")
                
                # Tabela de solu√ß√£o
                df_solucao = pd.DataFrame({
                    'Vari√°vel': [nomes_variaveis[i] for i in range(num_variables)],
                    'Valor': [f'{solucao[i]:.2f}' for i in range(num_variables)]
                })
                
                # Estiliza a tabela
                st.dataframe(
                    df_solucao,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Vari√°vel": st.column_config.TextColumn("Vari√°vel", width="medium"),
                        "Valor": st.column_config.TextColumn("Valor √ìtimo", width="medium")
                    }
                )

            with col2:
                rotulo_tipo = "üí∞ Valor M√°ximo" if tipo_otimizacao == "Maximizar" else "üíµ Valor M√≠nimo"
                st.markdown(f"#### {rotulo_tipo}")
                
                df_valor = pd.DataFrame({
                    'M√©trica': ['Z*'],
                    'Valor': [f'{valorOtimo:.2f}']
                })
                
                st.dataframe(
                    df_valor,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "M√©trica": st.column_config.TextColumn("M√©trica", width="medium"),
                        "Valor": st.column_config.TextColumn("Valor √ìtimo", width="medium")
                    }
                )

            with col3:
                st.markdown("#### üè∑Ô∏è **Pre√ßos-Sombra**")
                
                df_sombra = pd.DataFrame({
                    'Restri√ß√£o': [f'R{i+1}' for i in range(num_constraints)],
                    'Pre√ßo-Sombra': [f'{abs(precoSombra[i]):.2f}' for i in range(num_constraints)]
                })
                
                st.dataframe(
                    df_sombra,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Restri√ß√£o": st.column_config.TextColumn("Restri√ß√£o", width="small"),
                        "Pre√ßo-Sombra": st.column_config.TextColumn("Valor", width="medium")
                    }
                )
            
            # ========== TABLEAU FINAL ==========
            st.markdown("---")
            with st.expander("üî¢ **Tableau Final do Simplex** (Visualiza√ß√£o Avan√ßada)", expanded=False):
                st.markdown("### üìê Tableau Final da Solu√ß√£o")
                st.caption("Esta tabela mostra o estado final do algoritmo Simplex")
                
                subscripts = ['‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ']
                headers = [nomes_variaveis[i] for i in range(num_variables)]
                headers += [f"s{subscripts[i]}" for i in range(num_constraints)]
                headers.append("LD")
                
                row_labels = [f"R{i+1}" for i in range(num_constraints)] + ["Z"]
                
                df_tableau = pd.DataFrame(
                    final_tableau,
                    columns=headers,
                    index=row_labels
                )
                
                # Formata o tableau
                st.dataframe(
                    df_tableau.style.format("{:.2f}"),
                    use_container_width=True
                )
                
                st.markdown("""
                **üìñ Legenda:**
                - **Vari√°veis de decis√£o:** Com nomes personalizados
                - **s·µ¢:** Vari√°veis de folga (slack variables)
                - **LD:** Lado direito (Right-Hand Side)
                - **R·µ¢:** Linhas das restri√ß√µes
                - **Z:** Linha da fun√ß√£o objetivo
                
                üí° Os valores na √∫ltima coluna (LD) da linha Z mostram o valor √≥timo da fun√ß√£o objetivo.
                """)

# ==================== RODAP√â ====================
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #888; padding: 2rem 0;'>
    <p style='font-size: 0.9rem;'>
        <strong>üìä Calculadora de Programa√ß√£o Linear</strong> | 
        Desenvolvido com Streamlit e PuLP | 
        M√©todo Simplex
    </p>
    <p style='font-size: 0.8rem; margin-top: 0.5rem;'>
        üí° Dica: Use a barra lateral para configurar diferentes problemas e explore as op√ß√µes de an√°lise
    </p>
</div>
""", unsafe_allow_html=True)

